# mongodb学习记录1-增删改查

# 目录

[TOC]

# 背景介绍

## CAP定理（CAP theorem）

在计算机科学中, CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer's theorem）, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:

- **一致性(Consistency)** (所有节点在同一时间具有相同的数据)

- **可用性(Availability)** (保证每个请求不管成功或者失败都有响应)
- **分隔容忍(Partition tolerance)** (系统中任意信息的丢失或失败不会影响系统的继续运作)

CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。

因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：

- CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。
- CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。
- AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。

# mongodb介绍

## 存储格式

MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。

MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。

 ![mongo数据形式](http://www.runoob.com/wp-content/uploads/2013/10/crud-annotated-document.png)

## 术语介绍

| SQL术语/概念 | MongoDB术语/概念 | 解释/说明                           |
| ------------ | ---------------- | ----------------------------------- |
| database     | database         | 数据库                              |
| table        | collection       | 数据库表/集合                       |
| row          | document         | 数据记录行/文档                     |
| column       | field            | 数据字段/域                         |
| index        | index            | 索引                                |
| table joins  |                  | 表连接,MongoDB不支持                |
| primary key  | primary key      | 主键,MongoDB自动将_id字段设置为主键 |

## 增删改查

### 插入操作

- 说明

> 插入的时候如果集合不存在，那么插入操作会创建集合。 
>
> 在MongoDB中，存储于集合中的每一个文档都需要一个唯一的 _id 字段作为 primary_key。如果一个插入文档操作遗漏了该字段，MongoDB驱动会自动为该字段生成一个 ObjectId。
>
> MongoDB中所有的写操作在单一文档层级上是原子的	

- 命令

```shell
db.users.insertOne(
   {
      name: "sue",
      age: 19,
      status: "P"
   }
)

db.users.insertMany(
   [
     { name: "bob", age: 42, status: "A", },
     { name: "ahn", age: 22, status: "A", },
     { name: "xi", age: 34, status: "D", }
   ]
)
# 一个或多个
db.users.insert()
```



### 查询操作

- 说明

```shell
db.collection.find( <query filter>, <projection> )
```

​	一个 query filter指明返回哪些文档。

​	一个查询映射来指明返回匹配文档的哪些字段。映射限制了MongoDB通过网络返回给客户端的数据量。

- filter命令

```shell
格式：{
       _id: 1,
       name: "sue",
       age: 19,
       type: 1,
       status: "P",
       favorites: { artist: "Picasso", food: "pizza" },
       finished: [ 17, 3 ],
       badges: [ "blue", "black" ],
       points: [
          { points: 85, bonus: 20 },
          { points: 85, bonus: 10 }
       ]
     }
# 选择集合中的所有文档
# 一个空的 query filter 文档（{}） 选择集合中的所有文档：
db.users.find( {} )
db.users.find()

# 指定查询过滤条件
# 可以使用 <field>:<value> 表达式指定等于条件以选择所有包含 <field> 字段并且等于特定 <value> 的所有文档：
db.users.find( { status: "A" } )

# 使用查询操作符指定条件
# 下面的示例从 user 集合中检索 status 字段值为 "P" 或者 "D" 的所有文档：
# tips:也可以使用 $or 操作符表示这个查询，但是在相同字段执行等于检查时，建议使用 $in 而不是 $or 
db.users.find( { status: { $in: [ "P", "D" ] } } )

# 指定 AND 条件
# 下面的示例在 users 集合中检索 status 等于 "A"``**并且** ``age 小于 ($lt) 30 是所有文档：
db.users.find( { status: "A", age: { $lt: 30 } } )

# 指定 OR 条件
# 通过使用 $or 操作符，你可以指定一个使用逻辑 OR 连接词连接各子句的复合查询选择集合中匹配至少一个条件的文档。
# 下面的示例在 users 集合中检索 status 等于 "A"``**或者** ``age 小于 ($lt) 30 是所有文档：
db.users.find({$or: [ { status: "A" }, { age: { $lt: 30 } } ]})

# 指定 AND 和 OR 条件
# “在下面的示例中，复合查询文档选择集合中`status`` 等于 "A" 并且 要么 age 小于 ($lt) 30 要么 type 等于 1 的所有文档：
db.users.find({status: "A", $or: [ { age: { $lt: 30 } }, { type: 1 } ]})

# 数组上的查询
# 当字段包含数组，你可查询精确的匹配数组或数组中特定的值。如果数组包含嵌入文档，你可以使用 dot notation 查询内嵌文档中特定的字段。

# 数组上的精确匹配
# 要指定数组相等匹配，使用查询文档 { <field>: <value> } 其中 <value> 是匹配的数组。数组的相等匹配要求数组字段与指定的匹配数组 <value> 完全 相符，包括数组元素的顺序。
# 下面的例子查询所有字段 badges 是一个正好有两个元素: "blue" 和 "black" (以这种顺序)的数组的文档：
db.users.find( { badges: [ "blue", "black" ] } )

# 匹配一个数组元素
# 等于匹配可以指定匹配数组中的单一元素。如果数组中至少 一个 元素包含特定的值，就可以匹配这些声明。
# 下面的示例查询 badges 是一个数组字段并且包含 ``“black”``作为其数组元素的所有文档。
db.users.find( { badges: "black" } )

# 匹配数组中的指定元素
# 等于匹配可以指定匹配数组某一特定所有或位置的元素，使用 dot notation 。
# 在下面的例子中,查询使用 the dot notation 匹配所有 dadges 数组的第一个元素为``”black”`` 的文档:
db.users.find( { "badges.0": "black" } )

# 指定数组元素的多个查询条件

# 单个元素满足查询条件
# 使用 $elemMatch 操作符为数组元素指定复合条件，以查询数组中至少一个元素满足所有指定条件的文档。
# 下面的例子查询 finished 数组至少包含一个大于 ($gt) 15 并且小于 ($lt) 20 的元素的文档：
db.users.find( { finished: { $elemMatch: { $gt: 15, $lt: 20 } } } )

# 元素组合满足查询条件
# 下面的例子查询 finished 数组包含以某种组合满足查询条件的元素的文档;例如,一个元素满足大于 15 的条件并且有另一个元素满足小于 20 的条件,或者有一个元素满足了这两个条件：
db.users.find( { finished: { $gt: 15, $lt: 20 } } )

# 元素组合满足查询条件
db.users.find( { "points.points": { $lte: 70 }, "points.bonus": 20 } )
#  "points" : [ { "points" : 85, "bonus" : 20 }, { "points" : 64, "bonus" : 12 } ]
```

- projection

返回查询的映射字段。默认地，MongoDB中的查询返回匹配文档中的所有字段。为了限制MongoDB发送给应用的数据量，可以在查询操作中包括一个 projection 文档。

一个 `projection` *不能* *同时* 指定包括和排除字段，除了排除 `_id` 字段。 在 *显式包括* 字段的映射中，`_id` 字段是唯一一个您可以 *显式排除* 的。 

```shell
# 只返回指定的字段及 _id 字段
db.users.find( { status: "A" }, { name: 1, status: 1 } )
# 返回{ "_id" : 2, "name" : "bob", "status" : "A" }

# 只返回指定的字段
# 您可以通过在映射中指定排除的字段删除结果中的 _id 字段，如下面的案例所示：
db.users.find( { status: "A" }, { name: 1, status: 1, _id: 0 } )
# 返回{ "name" : "bob", "status" : "A" }

# 返回除了排除字段之外的所有字段
# 为了排除一个或多个字段，而不是列出在匹配文档中列出的字段，您可以像下列示例中一样，使用一个映射来排除特定的字段：
db.users.find( { status: "A" }, { favorites: 0, points: 0 } )
# 注意：除了 _id 字段，您不能在映射文档中组合 包含和排除 语句。

# 返回嵌入文档中的指定字段
# 使用 dot notation 返回嵌入文档中的特定字段
# 下面的示例指定了一个映射，返回 _id 字段、name 字段、 status 字段以及 favorites 文档中的 food 字段， food 仍然保持嵌入在 favorites 文档中。
db.users.find({ status: "A" }, { name: 1, status: 1, "favorites.food": 1 })

# 排除嵌入文档中的特定字段
# 下面的示例指明了排除 favorites 文档中 food 字段的映射。所有其他字段都会在匹配的文档中返回：
db.users.find({ status: "A" }, { "favorites.food": 0 })

# 映射数组中的嵌入文档
# 下面的示例指明映射返回 name 字段、 status 字段，以及 points 数组的文档中包含 bonus 字段的文档。 默认返回 _id 。
db.users.find( { status: "A" }, { name: 1, status: 1, "points.bonus": 1 } )

# 映射返回数组中特定的数组元素¶
# 对于包含数组的字段，MongoDB提供了下面的映射操作符： $elemMatch, $slice, 以及 $ 。
# 下面的示例使用 $slice 映射操作符来返回 scores 数组中最后的元素。
db.users.find( { status: "A" }, { name: 1, status: 1, points: { $slice: -1 } } )
# $elemMatch ， $slice ，以及 $ 是用来指定返回数组中包含映射元素的 唯一 方式。例如，您 不能 使用数组索引来指定映射的特定数组元素；例如 { "ratings.0": 1 } 映射 不会 映射到数组的第一个元素。
```

- 查询值为0 时

MongoDB中不同的运算符对待 `null` 值不一样.

```shell
db.users.insert(
   [
      { "_id" : 900, "name" : null },
      { "_id" : 901 }
   ]
)

# 相等过滤器
# The { name : null } query matches documents that either contain the name field whose value is null or that do not contain the name field.
db.users.find( { name: null } )
# 返回{ "_id" : 900, "name" : null }
#{ "_id" : 901 }

# 类型筛查
# { name : { $type: 10 } } 查询 仅仅 匹配那些包含值是 null 的 name 字段的文档,亦即 条目 字段的值是BSON类型中的 Null (即 10 ):
db.users.find( { name : { $type: 10 } } )
# { "_id" : 900, "name" : null } 返回 该查询只返回文 条目 字段是 null 值的文档:

# 存在性筛查
# The { name : { $exists: false } } query matches documents that do not contain the item field:
db.users.find( { name : { $exists: false } } )
# 返回{ "_id" : 901 } 该查询只返回那些 没有 包含 条目 字段的文档:
```

### 删除操作

```shell
# 删除所有文档
db.users.deleteMany({})
db.users.remove({})
# 要想从一个集合里删除所有文档，使用 drop() 方法删除整个集合,包括索引然后重建该集合和索引或许会更高效.

# 删除满足条件的所有文档
db.users.deleteMany({ status : "A" })
db.users.remove( { status : "P" } )
# 对于大量的删除操作，把你想要保留的文档复制到一个新的集合然后使用 db.collection.drop() 方法删除原集合或许会更高效。

# 仅删除一个满足条件的文档
db.users.deleteOne( { status: "D" } )
db.users.remove( { status: "D" }, 1)

# 其他方法
# 提供了一个排序选项.该选项允许删除以指定顺序排序的文档中的第一个文档.
db.collection.findOneAndDelete()

# 提供了一个排序选项.该选项允许删除以指定顺序排序的文档中的第一个文档.
db.collection.findOneAndModify() 
db.collection.bulkWrite()
```

### 更新操作

一旦设定，你不能更新 `_id` 字段的值，你也不能用有不同 `_id` 字段值的替换文档来替换已经存在的文档。

当执行更新操作增加的文档大小超过了为该文档分配的空间时。更新操作会在磁盘上重定位该文档。 

MongoDB按照文档写入的顺序整理文档字段，*除了* 如下的情况：

`_id` 字段始终是文档中的第一个字段。

包括字段名称的 [`renaming`](http://www.mongoing.com/docs/reference/operator/update/rename.html#up._S_rename) 操作可能会导致文档中的字段重新排序。

```shell
# 下面的例子对 users 集合使用 db.collection.updateOne() 方法来更新*第一个* 根据 过滤条件``favorites.artist`` 等于 "Picasso" 匹配到的文档更新操作:
# 使用 $set 操作符更新 favorites.food 字段的值为 "pie" 并更新 type 字段的值为 3,
# 使用 $currentDate 操作符更新 lastModified 字段的值到当前日期。如果 lastModified 字段不存在， $currentDate 会创建该字段。详情请参阅 $currentDate.

db.users.updateOne(
   { "favorites.artist": "Picasso" },
   {
     $set: { "favorites.food": "pie", type: 3 },
     $currentDate: { lastModified: true }
   }
)

# 下面的例子对 users 集合使用 db.collection.updateMany() 方法来更新所有根据过滤条件 favorites.artist 等于 "Picasso" 匹配的文档。更新操作:
# 使用 $set 操作符更新 favorites.food 字段的值为 "Pisanello" 并更新 type 字段的值为 3,
# 使用 $currentDate 操作符更新 lastModified 字段的值到当前日期。如果 lastModified 字段不存在， $currentDate 会创建该字段。详情请参阅 $currentDate.

db.users.updateMany(
   { "favorites.artist": "Picasso" },
   {
     $set: { "favorites.artist": "Pisanello", type: 3 },
     $currentDate: { lastModified: true }
   }
)

# db.collection.update
# 下面的例子对 users 集合使用 db.collection.update() 方法来更新根据过滤条件 favorites.artist 等于 "Pisanello" 匹配的 第一个 文档。更新操作:
# 使用 $set 操作符把 favorites.food 字段值更新为 "pizza" 并且把 type 字段的值更新为 0。
# 使用 $currentDate 操作符更新 lastModified 字段的值到当前日期。如果 lastModified 字段不存在， $currentDate 会创建该字段。详情请参阅 $currentDate.

db.users.update(
   { "favorites.artist": "Pisanello" },
   {
     $set: { "favorites.food": "pizza", type: 0,  },
     $currentDate: { lastModified: true }
   }
)

# 使用 db.collection.update() 并包含 multi: true 选项来更新多个文档：
db.users.update(
   { "favorites.artist": "Pisanello" },
   {
     $set: { "favorites.food": "pizza", type: 0,  },
     $currentDate: { lastModified: true }
   },
   { multi: true }
)

# 文档替换
# 下面的例子对 users 集合使用 db.collection.replaceOne() 方法将通过过滤条件 name 等于 "sue" 匹配到的 第一个 文档替换为新文档:

db.users.replaceOne(
   { name: "abc" },
   { name: "amy", age: 34, type: 2, status: "P", favorites: { "artist": "Dali", food: "donuts" } }
)

# 下面的例子对 users 集合使用 db.collection.update() 方法将通过过滤条件 name 等于 "xyz" 匹配到的 第一个 文档替换为新文档:

db.users.update(
   { name: "xyz" },
   { name: "mee", age: 25, type: 1, status: "A", favorites: { "artist": "Matisse", food: "mango" } })
   
# 其他方法
# 如下方法也可以更新一个集合的文档：
db.collection.findOneAndReplace().
db.collection.findOneAndUpdate().
db.collection.findAndModify().
db.collection.save().
db.collection.bulkWrite().

```

 

# 资料

[mongodb中文社区](http://www.mongoing.com/docs/tutorial/insert-documents.html#db-collection-insertone)